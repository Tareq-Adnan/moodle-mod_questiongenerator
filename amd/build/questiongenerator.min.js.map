{"version":3,"file":"questiongenerator.min.js","sources":["../src/questiongenerator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module questiongenerator\n *\n * @module     mod_questiongenerator/questiongenerator\n * @copyright  2024 YOUR NAME <your@email.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\"jquery\", \"core/ajax\"], function ($, Ajax) {\n    \"use strict\";\n    return {\n        init: function (cmid) {\n            var form = document.getElementById(\"quizForm\");\n            function submitQuizToMoodle(formData) {\n                // Display \"Creating Quiz...\" message\n                var modalBody = document.querySelector(\".modal-body\");\n                modalBody.innerHTML = \"<p>Creating quiz...</p>\";\n\n                // Optionally, you can add a spinner (for better UX)\n                modalBody.innerHTML +=\n                    '<div class=\"spinner-border text-primary\" role=\"status\"><span class=\"sr-only\">Loading...</span></div>';\n\n                // Convert the form data to a JSON string\n                var jsonData = JSON.stringify(formData);\n\n                // Define the request for the Moodle AJAX call\n                var request = {\n                    methodname: \"mod_questiongenerator_create_quiz\", // Your actual method name\n                    args: {\n                        quiz_data: jsonData, // Pass the JSON string as data\n                    },\n                };\n\n                // Remove modal footer (assuming you have a class 'modal-footer' in your modal)\n                var modalFooter = document.querySelector(\".modal-footer\");\n                if (modalFooter) {\n                    modalFooter.remove();\n                }\n\n                // Send the AJAX request\n                Ajax.call([request])[0]\n                    .done(function (response) {\n                        if (response.status) {\n                            console.log(\"Quiz submitted successfully:\", response);\n\n                            // Update the modal with a success message\n                            modalBody.innerHTML = \"<p>Quiz created successfully!</p>\";\n\n                            // Optionally, you can add an auto-close after a few seconds\n                            setTimeout(function () {\n                                $(\"#quizModal\").modal(\"hide\"); // Close the modal\n                            }, 2000); // 2-second delay before closing\n                        }\n                    })\n                    .fail(function (error) {\n                        console.error(\"Error submitting quiz:\", error);\n\n                        // Show an error message to the user\n                        modalBody.innerHTML =\n                            '<p class=\"text-danger\">There was an error creating the quiz. Please try again.</p>';\n                    });\n            }\n\n            console.log(cmid);\n            $(\"#setQuizBtn\").on(\"click\", function () { });\n\n            // var form = $('#quizForm');\n            // console.log(form);\n            $(document).on(\"submit\", \"#quizForm\", function (event) {\n                event.preventDefault();\n                var form = $(\"#quizForm\")[0]; // Convert jQuery object to native DOM element\n\n                if (!form.checkValidity()) {\n                    event.stopPropagation();\n                    form.classList.add(\"was-validated\");\n                    return;\n                }\n\n                // Gather form data\n\n                // Collect form data using input values directly\n                var quizTitle = $('input[name=\"quiz_title\"]').val();\n                var easyMarks = $('input[name=\"easy_marks\"]').val();\n                var mediumMarks = $('input[name=\"medium_marks\"]').val();\n                var hardMarks = $('input[name=\"hard_marks\"]').val();\n\n                // Collect selected questions\n                const selectedQuestions = [];\n                const checkboxes = $('#questionTable input[type=\"checkbox\"]:checked'); // Get only checked checkboxes\n                checkboxes.each(function () {\n                    if ($(this).attr(\"id\") !== \"selectAll\") {\n                        selectedQuestions.push($(this).val()); // Collect the value of each checked checkbox\n                    }\n                });\n\n                // Create an object to hold the form data\n                var formData = {\n                    cmid: cmid,\n                    quiz_title: quizTitle,\n                    easy_marks: easyMarks,\n                    medium_marks: mediumMarks,\n                    hard_marks: hardMarks,\n                    selected_questions: selectedQuestions,\n                };\n\n                // For debugging: Log the formData object\n                console.log(formData);\n\n                // Send the data to the Moodle web service via AJAX\n                submitQuizToMoodle(formData);\n            });\n\n            $(\"#categoryDropdown\").on(\"change\", function () {\n                var categoryid = $(this).val();\n\n                var request = {\n                    methodname: \"mod_questiongenerator_get_generated_questions\",\n                    args: {\n                        categoryid: categoryid,\n                        cmid: cmid,\n                    },\n                };\n\n                Ajax.call([request])[0]\n                    .done(function (response) {\n                        var tableBody = $(\"#questionTable tbody\");\n                        tableBody.empty();\n\n                        response.forEach(function (question) {\n                            console.log(question);\n                            var difficultyButton = \"\";\n                            var selectField = \"\";\n\n                            // Check if the difficulty is empty\n                            if (!question.difficulty) {\n                                selectField =\n                                    '<input type=\"checkbox\" name=\"select_question\" value=\"' +\n                                    question.questionid +\n                                    '\" disabled=\"true\">';\n                                difficultyButton =\n                                    '<button data-question-id=\"' +\n                                    question.questionid +\n                                    '\" class=\"btn btn-primary check-difficulty\">Check Difficulty</button>';\n                            } else {\n                                selectField =\n                                    '<input type=\"checkbox\" name=\"select_question\" value=\"' +\n                                    question.questionid +\n                                    '\" >';\n                                difficultyButton = question.difficulty.toLowerCase(); // Ensure all lowercase first\n                                difficultyButton =\n                                    difficultyButton.charAt(0).toUpperCase() +\n                                    difficultyButton.slice(1);\n                            }\n                            var row =\n                                \"<tr>\" +\n                                \"<td>\" +\n                                selectField +\n                                \"</td>\" +\n                                \"<td>\" +\n                                question.question +\n                                \"</td>\" +\n                                \"<td>\" +\n                                question.options +\n                                \"</td>\" +\n                                \"<td>\" +\n                                question.answer +\n                                \"</td>\" +\n                                \"<td>\" +\n                                difficultyButton +\n                                \"</td>\" +\n                                \"</tr>\";\n                            tableBody.append(row);\n                            attachCheckboxListeners();\n                        });\n                    })\n                    .fail(function (error) {\n                        console.log(\"Error fetching questions:\", error);\n                    });\n            });\n            $(document).on(\"click\", \".check-difficulty\", function () {\n                // Get the data-question-id attribute\n                var questionId = $(this).data(\"question-id\");\n\n                // Find the parent <td> of the clicked button\n                var parentTd = $(\n                    'button[data-question-id=\"' + questionId + '\"]'\n                ).closest(\"td\");\n\n                // Show Bootstrap spinner in the parent <td>\n                var loaderHtml = `<div class=\"spinner-border text-primary\"\n                role = \"status\" > <span class=\"sr-only\">Loading...</span></div > `;\n                parentTd.html(loaderHtml); // Replace the button with the spinner.\n\n                var request = {\n                    methodname: \"mod_questiongenerator_check_dificulty_level\",\n                    args: { questionid: questionId },\n                };\n\n                // Make the AJAX call\n                Ajax.call([request])[0]\n                    .done(function (response) {\n                        // Replace spinner with the difficulty level text\n                        if (response) {\n                            parentTd.html(response); // Replace spinner with the difficulty text\n                            document.querySelector(\n                                'input[type=\"checkbox\"][value=\"' + questionId + '\"]'\n                            ).disabled = false;\n                        } else {\n                            parentTd.html(\"Difficulty not found\"); // Fallback if no difficulty is returned\n                        }\n                    })\n                    .fail(function (error) {\n                        console.log(\"Error fetching difficulty level:\", error);\n\n                        // If there's an error, replace the spinner with an error message\n                        parentTd.html(\"Error fetching difficulty level\");\n                    });\n            });\n            // Function to attach checkbox event listeners\n            function attachCheckboxListeners() {\n                const setQuizBtn = document.getElementById(\"setQuizBtn\");\n                const selectAll = document.getElementById(\"selectAll\");\n                // Event listener for the \"Select All\" checkbox\n                if (selectAll) {\n                    selectAll.addEventListener(\"change\", function () {\n                        // Select all dynamically generated checkboxes in the table\n                        const checkboxes = document.querySelectorAll(\n                            '#questionTable input[type=\"checkbox\"]:not(:disabled)'\n                        );\n\n                        // Check or uncheck all checkboxes based on the \"Select All\" checkbox state\n                        checkboxes.forEach((checkbox) => {\n                            checkbox.checked = selectAll.checked;\n                        });\n\n                        // Call toggleButton to show or hide the \"Set Quiz\" button based on the checkbox states\n                        toggleButton();\n                    });\n                }\n                // Initially hide the button\n                if (setQuizBtn) {\n                    setQuizBtn.style.visibility = \"hidden\";\n                }\n\n                let questiontable = document.querySelector(\"#questionTable\");\n                // Use event delegation to listen for changes in dynamically generated checkboxes\n                if (questiontable) {\n                    questiontable.addEventListener(\"change\", function (e) {\n                        // Ensure the event is coming from a checkbox\n                        if (e.target && e.target.type === \"checkbox\") {\n                            toggleButton();\n                        }\n                    });\n                }\n\n                /**\n                 * Description\n                 * @returns {any}\n                 */\n                function toggleButton() {\n                    // Select all dynamically generated checkboxes in the table\n                    const checkboxes = document.querySelectorAll(\n                        '#questionTable input[type=\"checkbox\"]:not(:disabled)'\n                    );\n                    let isChecked = false;\n\n                    checkboxes.forEach((checkbox) => {\n                        if (checkbox.checked) {\n                            isChecked = true;\n                        }\n                    });\n\n                    // Show the button if at least one checkbox is checked, otherwise hide it\n                    if (setQuizBtn) {\n                        setQuizBtn.style.visibility = isChecked ? \"visible\" : \"hidden\";\n                    }\n                }\n            }\n            attachCheckboxListeners();\n\n            // Call the attachCheckboxListeners function after generating the table dynamically\n\n            $(document).ready(function () {\n                $(\".state-deactivated, .state-activated\").on(\"click\", function () {\n                    const quizId = $(this).data(\"quiz-id\");\n                    const isDeactivated = $(this).hasClass(\"state-deactivated\");\n                    console.log($(\".state-activated\").length);\n                    // Check if any quiz is currently activated\n                    if ($(\".state-activated\").length > 0 && isDeactivated) {\n                        // Show an alert if there are activated quizzes\n                        alert(\n                            \"Please deactivate all quizzes first before activating a new one.\"\n                        );\n                        return; // Stop further execution\n                    }\n\n                    var request = {\n                        methodname: \"mod_questiongenerator_update_quiz_state\",\n                        args: {\n                            quizid: quizId,\n                        },\n                    };\n\n                    // Call the Moodle AJAX API\n                    Ajax.call([request])[0]\n                        .done(\n                            function (response) {\n                                console.log(\"Response:\", response);\n\n                                if (response) {\n                                    // If the clicked button was deactivated, activate it\n                                    if (isDeactivated) {\n                                        $(this)\n                                            .removeClass(\"state-deactivated\")\n                                            .addClass(\"state-activated\");\n                                        $(this).css(\"color\", \"red\").text(\"Deactivate\");\n                                    } else {\n                                        // If it was already activated, deactivate it\n                                        $(this)\n                                            .removeClass(\"state-activated\")\n                                            .addClass(\"state-deactivated\");\n                                        $(this).css(\"color\", \"\").text(\"Activate\");\n                                    }\n                                } else {\n                                    console.error(\"Failed to update quiz state.\");\n                                }\n                            }.bind(this)\n                        )\n                        .fail(function (error) {\n                            console.log(\"Error updating quiz state:\", error);\n                        });\n                });\n            });\n        },\n    };\n});\n"],"names":["define","$","Ajax","init","cmid","document","getElementById","attachCheckboxListeners","setQuizBtn","selectAll","addEventListener","querySelectorAll","forEach","checkbox","checked","toggleButton","style","visibility","questiontable","querySelector","checkboxes","isChecked","e","target","type","console","log","on","event","preventDefault","form","checkValidity","stopPropagation","classList","add","quizTitle","val","easyMarks","mediumMarks","hardMarks","selectedQuestions","each","this","attr","push","formData","quiz_title","easy_marks","medium_marks","hard_marks","selected_questions","modalBody","innerHTML","request","methodname","args","quiz_data","JSON","stringify","modalFooter","remove","call","done","response","status","setTimeout","modal","fail","error","submitQuizToMoodle","categoryid","tableBody","empty","question","difficultyButton","selectField","difficulty","questionid","toLowerCase","charAt","toUpperCase","slice","row","options","answer","append","questionId","data","parentTd","closest","html","disabled","ready","quizId","isDeactivated","hasClass","length","alert","quizid","removeClass","addClass","css","text","bind"],"mappings":"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"}
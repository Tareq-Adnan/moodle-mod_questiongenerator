{"version":3,"file":"questiongenerator.min.js","sources":["../src/questiongenerator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * TODO describe module questiongenerator\n *\n * @module     mod_questiongenerator/questiongenerator\n * @copyright  2024 YOUR NAME <your@email.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/ajax'], function($, Ajax) {\n    'use strict';\n    return {\n        init: function(cmid) {\n            var form = document.getElementById('quizForm');\n            function submitQuizToMoodle(formData) {\n                // Display \"Creating Quiz...\" message\n                var modalBody = document.querySelector('.modal-body');\n                modalBody.innerHTML = '<p>Creating quiz...</p>';\n            \n                // Optionally, you can add a spinner (for better UX)\n                modalBody.innerHTML += '<div class=\"spinner-border text-primary\" role=\"status\"><span class=\"sr-only\">Loading...</span></div>';\n            \n                // Convert the form data to a JSON string\n                var jsonData = JSON.stringify(formData);\n                \n                // Define the request for the Moodle AJAX call\n                var request = {\n                    methodname: 'mod_questiongenerator_create_quiz', // Your actual method name\n                    args: {\n                        quiz_data: jsonData // Pass the JSON string as data\n                    },\n                };\n            \n                // Remove modal footer (assuming you have a class 'modal-footer' in your modal)\n                var modalFooter = document.querySelector('.modal-footer');\n                if (modalFooter) {\n                    modalFooter.remove();\n                }\n            \n                // Send the AJAX request\n                Ajax.call([request])[0]\n                    .done(function(response) {\n                        if(response.status){\n                            console.log('Quiz submitted successfully:', response);\n            \n                            // Update the modal with a success message\n                            modalBody.innerHTML = '<p>Quiz created successfully!</p>';\n                \n                            // Optionally, you can add an auto-close after a few seconds\n                            setTimeout(function() {\n                                $('#quizModal').modal('hide'); // Close the modal\n                            }, 2000); // 2-second delay before closing\n                        }\n\n                    })\n                    .fail(function(error) {\n                        console.error('Error submitting quiz:', error);\n            \n                        // Show an error message to the user\n                        modalBody.innerHTML = '<p class=\"text-danger\">There was an error creating the quiz. Please try again.</p>';\n                    });\n            }\n            \n            console.log(cmid);\n            $('#setQuizBtn').on('click', function() {\n               \n            });\n\n            // var form = $('#quizForm');\n            // console.log(form);\n            $(document).on('submit','#quizForm', function (event) {\n                event.preventDefault(); \n                var form = $('#quizForm')[0]; // Convert jQuery object to native DOM element\n\n                if (!form.checkValidity()) {\n                    event.stopPropagation();\n                    form.classList.add('was-validated');\n                    return;\n                }\n\n                // Gather form data\n                \n                   // Collect form data using input values directly\n                var quizTitle = $('input[name=\"quiz_title\"]').val();\n                var easyMarks = $('input[name=\"easy_marks\"]').val();\n                var mediumMarks = $('input[name=\"medium_marks\"]').val();\n                var hardMarks = $('input[name=\"hard_marks\"]').val();\n\n                // Collect selected questions\n                const selectedQuestions = [];\n                const checkboxes = $('#questionTable input[type=\"checkbox\"]:checked'); // Get only checked checkboxes\n                checkboxes.each(function() {\n                    if ($(this).attr('id') !== 'selectAll') {\n                        selectedQuestions.push($(this).val()); // Collect the value of each checked checkbox\n\n                    }\n                });\n\n                // Create an object to hold the form data\n                var formData = {\n                    cmid : cmid,\n                    quiz_title: quizTitle,\n                    easy_marks: easyMarks,\n                    medium_marks: mediumMarks,\n                    hard_marks: hardMarks,\n                    selected_questions: selectedQuestions\n                };\n\n                // For debugging: Log the formData object\n                console.log(formData);\n\n                // Send the data to the Moodle web service via AJAX\n                submitQuizToMoodle(formData);\n            });\n\n            $('#categoryDropdown').on('change', function() {\n                var categoryid = $(this).val();\n                \n                var request = {\n                    methodname: 'mod_questiongenerator_get_generated_questions',\n                    args: {\n                        categoryid: categoryid,\n                        cmid: cmid,\n\n                    },\n                };\n\n                Ajax.call([request])[0].done(function(response) {\n                    var tableBody = $('#questionTable tbody');\n                    tableBody.empty();\n\n                    response.forEach(function(question) {\n                        console.log(question);\n                        var difficultyButton = '';\n                        var selectField = '';\n\n                        // Check if the difficulty is empty\n                        if (!question.difficulty) {\n                            selectField = '<input type=\"checkbox\" name=\"select_question\" value=\"' + question.questionid + '\" disabled=\"true\">';\n                            difficultyButton = '<button data-question-id=\"' + question.questionid + '\" class=\"btn btn-primary check-difficulty\">Check Difficulty</button>';\n                        }\n                        else{\n                            selectField = '<input type=\"checkbox\" name=\"select_question\" value=\"' + question.questionid + '\" >';\n                            difficultyButton = question.difficulty.toLowerCase(); // Ensure all lowercase first\n                            difficultyButton = difficultyButton.charAt(0).toUpperCase() + difficultyButton.slice(1);\n                                                    }\n                        var row = '<tr>' +\n                                  '<td>' + selectField + '</td>' +\n                                  '<td>' + question.question + '</td>' +\n                                  '<td>' + question.options + '</td>' +\n                                  '<td>' + question.answer + '</td>' +\n                                  '<td>'+difficultyButton+'</td>' +\n                                  '</tr>';\n                        tableBody.append(row);\n                        attachCheckboxListeners(); \n\n                    });\n                }).fail(function(error) {\n                    console.log('Error fetching questions:', error);\n                });\n            });\n            $(document).on('click', '.check-difficulty', function() {\n                // Get the data-question-id attribute\n                var questionId = $(this).data('question-id');\n                \n                // Find the parent <td> of the clicked button\n                var parentTd = $('button[data-question-id=\"' + questionId + '\"]').closest('td');\n                \n                // Show Bootstrap spinner in the parent <td>\n                var loaderHtml = '<div class=\"spinner-border text-primary\" role=\"status\"><span class=\"sr-only\">Loading...</span></div>';\n                parentTd.html(loaderHtml);  // Replace the button with the spinner\n            \n                var request = {\n                    methodname: 'mod_questiongenerator_check_dificulty_level',\n                    args: { questionid: questionId },\n                };\n            \n                console.log('Request:', request);\n            \n                // Make the AJAX call\n                Ajax.call([request])[0].done(function(response) {\n                    console.log('Response:', response);\n                    \n                    // Replace spinner with the difficulty level text\n                    if (response) {\n                        parentTd.html(response); // Replace spinner with the difficulty text\n                        document.querySelector('input[type=\"checkbox\"][value=\"'+questionId+'\"]').disabled = false;\n\n                    } else {\n                        parentTd.html('Difficulty not found'); // Fallback if no difficulty is returned\n                    }\n                }).fail(function(error) {\n                    console.log('Error fetching difficulty level:', error);\n                    \n                    // If there's an error, replace the spinner with an error message\n                    parentTd.html('Error fetching difficulty level');\n                });\n            \n                console.log('Question ID:', questionId);\n            });\n            // Function to attach checkbox event listeners\n            function attachCheckboxListeners() {\n                const setQuizBtn = document.getElementById('setQuizBtn');\n                const selectAll = document.getElementById('selectAll');\n                // Event listener for the \"Select All\" checkbox\n                selectAll.addEventListener('change', function() {\n                    // Select all dynamically generated checkboxes in the table\n                    const checkboxes = document.querySelectorAll('#questionTable input[type=\"checkbox\"]');\n                    \n                    // Check or uncheck all checkboxes based on the \"Select All\" checkbox state\n                    checkboxes.forEach(checkbox => {\n                        checkbox.checked = selectAll.checked;\n                    });\n                    \n                    // Call toggleButton to show or hide the \"Set Quiz\" button based on the checkbox states\n                    toggleButton();\n                });\n                // Initially hide the button\n                setQuizBtn.style.visibility = 'hidden';\n            \n                // Use event delegation to listen for changes in dynamically generated checkboxes\n                document.querySelector('#questionTable').addEventListener('change', function(e) {\n                    // Ensure the event is coming from a checkbox\n                    if (e.target && e.target.type === 'checkbox') {\n                        toggleButton();\n                    }\n                });\n            \n                function toggleButton() {\n                    // Select all dynamically generated checkboxes in the table\n                    const checkboxes = document.querySelectorAll('#questionTable input[type=\"checkbox\"]');\n                    let isChecked = false;\n            \n                    checkboxes.forEach(checkbox => {\n                        if (checkbox.checked) {\n                            isChecked = true;\n                        }\n                    });\n            \n                    // Show the button if at least one checkbox is checked, otherwise hide it\n                    setQuizBtn.style.visibility = isChecked ? 'visible' : 'hidden';\n                }\n            }\n            \n            // Call the attachCheckboxListeners function after generating the table dynamically\n            \n            \n            \n        \n            \n        }\n    };\n    \n\n});\n\n"],"names":["define","$","Ajax","init","cmid","document","getElementById","console","log","on","event","preventDefault","form","checkValidity","stopPropagation","classList","add","quizTitle","val","easyMarks","mediumMarks","hardMarks","selectedQuestions","each","this","attr","push","formData","quiz_title","easy_marks","medium_marks","hard_marks","selected_questions","modalBody","querySelector","innerHTML","request","methodname","args","quiz_data","JSON","stringify","modalFooter","remove","call","done","response","status","setTimeout","modal","fail","error","submitQuizToMoodle","categoryid","tableBody","empty","forEach","question","difficultyButton","selectField","difficulty","questionid","toLowerCase","charAt","toUpperCase","slice","row","options","answer","append","setQuizBtn","selectAll","toggleButton","checkboxes","querySelectorAll","isChecked","checkbox","checked","style","visibility","addEventListener","e","target","type","attachCheckboxListeners","questionId","data","parentTd","closest","html","disabled"],"mappings":"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"}
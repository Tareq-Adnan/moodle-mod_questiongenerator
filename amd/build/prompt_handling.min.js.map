{"version":3,"file":"prompt_handling.min.js","sources":["../src/prompt_handling.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module prompt_handling\n *\n * @module     mod_questiongenerator/prompt_handling\n * @copyright  2024 YOUR NAME <your@email.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport { call as getContent } from \"core/ajax\";\nimport promptModal from './prompt_modal';\nexport const promptHandling = async (cmid) => {\n\n    var form = $('#prompt-form');\n    var content = $('#mod-qg-body');\n    var spinner = $('#qg-spinner');\n    var save = $('#save-question');\n    var tryagain = $('#try-again');\n    var modal = $('#bsmodal');\n    var questionData = null;\n\n    form.on('submit', function (e) {\n        e.preventDefault();\n        let formdata = new FormData(this);\n        let prompt = formdata.get('prompt');\n        form.trigger('reset');\n        spinner.show();\n        $(this).find('button[type=\"submit\"]').prop('disabled', true);\n        // promptModal.create({});\n\n\n        getContent([{\n            methodname: 'mod_questiongenerator_submit_prompts',\n            args: { prompt: prompt },\n        }])[0].done(response => {\n            let questions = JSON.parse(response);\n            // console.log(questions);\n            questionData = response;\n            showQuestions(questions);\n            spinner.hide();\n            $(this).find('button[type=\"submit\"]').prop('disabled', false);\n        }).fail(error => {\n            spinner.hide();\n            throw new Error(error.message);\n        });\n    });\n\n    save.on('click', function () {\n        $(this).prop('disabled', true); // Disable the button to prevent multiple clicks\n        content.empty(); // Clear the content\n        $(this).attr('id','savecat-question');\n        if (questionData) {\n            getContent([{\n                methodname: 'mod_questiongenerator_get_questions_categories',\n                args: {},\n            }])[0].done(response => {\n                $(this).prop('disabled', false); // Re-enable the button after response\n                \n                // Check if the response has categories\n                if (response && response.length > 0) {\n                    renderCategorySelect(response);\n                } else {\n                    renderCategoryInput(); // If no categories, show input field\n                }\n            }).fail(error => {\n                spinner.hide();\n                console.error('Error:', error.message);\n                $(this).prop('disabled', false); // Re-enable the button in case of error\n            });\n        }\n    });\n\n    $(document).on('click', '.save-btn', function (e) {\n       e.preventDefault();\n       let category = $('#category').val();\n       console.log(val);\n    })\n\n    // Function to render category select dropdown with Bootstrap styling\n    function renderCategorySelect(categories) {\n        let selectHTML = `<div class=\"form-group\">\n                            <label for=\"category\">Select Category:</label>\n                            <select id=\"category\" class=\"form-control\" name=\"category\">`;\n\n        // Populate the select options\n        categories.forEach(category => {\n            selectHTML += `<option value=\"${category.id}\">${category.name}</option>`;\n        });\n\n        selectHTML += `</select>\n                       </div>\n                       <button id=\"createNewCategoryBtn\" type=\"button\" class=\"btn btn-outline-primary mt-2\">Create New Category</button>`;\n\n        content.html(selectHTML); // Render the dropdown into the content variable\n\n        // Add event listener for \"Create New Category\" button\n        $('#createNewCategoryBtn').on('click', function() {\n            renderCategoryInput(); // Switch to input text field\n        });\n    }\n\n    // Function to render category input text field with Bootstrap styling\n    function renderCategoryInput() {\n        const inputHTML = `<div class=\"form-group\">\n                             <label for=\"category\">New Category:</label>\n                             <input type=\"text\" id=\"category\" class=\"form-control\" name=\"category\" placeholder=\"Enter new category\">\n                           </div>\n                           <button id=\"backToSelectBtn\" type=\"button\" class=\"btn btn-outline-secondary mt-2\">Back to Select</button>`;\n\n        content.html(inputHTML); // Render the input field into the content variable\n\n        // Add event listener for \"Back to Select\" button\n        $('#backToSelectBtn').on('click', function() {\n            // Call the API again or restore previous categories if needed\n            getContent([{\n                methodname: 'mod_questiongenerator_get_questions_categories',\n                args: {},\n            }])[0].done(response => {\n                renderCategorySelect(response);\n            });\n        });\n    }\n\n    $(document).on('click', '#mod-qg-close', function () {\n        hideModal();\n    });\n\n    tryagain.on('click', function () {\n        hideModal();\n    });\n\n    function showQuestions(questions) {\n        let html = '';\n        questions.forEach(question => {\n            html += ` <div class=\"quiz-container\"><div class=\"question\">\n                        <h6>${question.question}</h6>\n                        </div>\n                          <div class=\"options\">\n                        `;\n            question.options.forEach((option, index) => {\n                html += `<label class=\"option\">\n                       \n                        <span><strong>${index + 1}.</strong>  ${option}</span>\n                    </label>`;\n            });\n\n            html += `</div><div id=\"result\" class=\"result\">\n                    <p>The correct answer is: <span id=\"correctAnswer\">${question.correct_answer}</span></p>\n                    </div>`;\n            html += '</div></div>';\n        });\n\n        content.empty().html(html);\n        modal.modal('show');\n    }\n    function hideModal() {\n        modal.addClass('hide');\n        setTimeout(() => {\n            modal.modal('hide').removeClass('hide');\n        }, 250);\n    }\n\n};\n\n"],"names":["async","form","content","spinner","save","tryagain","modal","questionData","renderCategorySelect","categories","selectHTML","forEach","category","id","name","html","on","renderCategoryInput","methodname","args","done","response","hideModal","addClass","setTimeout","removeClass","e","preventDefault","prompt","FormData","this","get","trigger","show","find","prop","questions","JSON","parse","question","options","option","index","correct_answer","empty","showQuestions","hide","fail","error","Error","message","attr","length","console","document","val","log"],"mappings":";;;;;;;gNA0B8BA,MAAAA,WAEtBC,MAAO,mBAAE,gBACTC,SAAU,mBAAE,gBACZC,SAAU,mBAAE,eACZC,MAAO,mBAAE,kBACTC,UAAW,mBAAE,cACbC,OAAQ,mBAAE,YACVC,aAAe,cA4DVC,qBAAqBC,gBACtBC,WAAc,gMAKlBD,WAAWE,SAAQC,WACfF,YAAe,kBAAiBE,SAASC,OAAOD,SAASE,mBAG7DJ,YAAe,qLAIfR,QAAQa,KAAKL,gCAGX,yBAAyBM,GAAG,SAAS,WACnCC,kCAKCA,sBAOLf,QAAQa,KANW,yaASjB,oBAAoBC,GAAG,SAAS,0BAEnB,CAAC,CACRE,WAAY,iDACZC,KAAM,MACN,GAAGC,MAAKC,WACRb,qBAAqBa,yBAqCxBC,YACLhB,MAAMiB,SAAS,QACfC,YAAW,KACPlB,MAAMA,MAAM,QAAQmB,YAAY,UACjC,KA1IPxB,KAAKe,GAAG,UAAU,SAAUU,GACxBA,EAAEC,qBAEEC,OADW,IAAIC,SAASC,MACNC,IAAI,UAC1B9B,KAAK+B,QAAQ,SACb7B,QAAQ8B,2BACNH,MAAMI,KAAK,yBAAyBC,KAAK,YAAY,kBAI5C,CAAC,CACRjB,WAAY,uCACZC,KAAM,CAAES,OAAQA,WAChB,GAAGR,MAAKC,eACJe,UAAYC,KAAKC,MAAMjB,UAE3Bd,aAAec,kBA8FAe,eACfrB,KAAO,GACXqB,UAAUzB,SAAQ4B,WACdxB,MAAS,oFACSwB,SAASA,2HAI3BA,SAASC,QAAQ7B,SAAQ,CAAC8B,OAAQC,SAC9B3B,MAAS,0FAEe2B,MAAQ,gBAAgBD,iDAIpD1B,MAAS,kHACoDwB,SAASI,wDAEtE5B,MAAQ,kBAGZb,QAAQ0C,QAAQ7B,KAAKA,MACrBT,MAAMA,MAAM,QAnHRuC,CAAcT,WACdjC,QAAQ2C,2BACNhB,MAAMI,KAAK,yBAAyBC,KAAK,YAAY,MACxDY,MAAKC,cACJ7C,QAAQ2C,OACF,IAAIG,MAAMD,MAAME,eAI9B9C,KAAKY,GAAG,SAAS,+BACXc,MAAMK,KAAK,YAAY,GACzBjC,QAAQ0C,4BACNd,MAAMqB,KAAK,KAAK,oBACd5C,6BACW,CAAC,CACRW,WAAY,iDACZC,KAAM,MACN,GAAGC,MAAKC,+BACNS,MAAMK,KAAK,YAAY,GAGrBd,UAAYA,SAAS+B,OAAS,EAC9B5C,qBAAqBa,UAErBJ,yBAEL8B,MAAKC,QACJ7C,QAAQ2C,OACRO,QAAQL,MAAM,SAAUA,MAAME,6BAC5BpB,MAAMK,KAAK,YAAY,6BAKnCmB,UAAUtC,GAAG,QAAS,aAAa,SAAUU,GAC5CA,EAAEC,kBACa,mBAAE,aAAa4B,MAC9BF,QAAQG,IAAID,4BAgDbD,UAAUtC,GAAG,QAAS,iBAAiB,WACrCM,eAGJjB,SAASW,GAAG,SAAS,WACjBM"}
{"version":3,"file":"prompt_handling.min.js","sources":["../src/prompt_handling.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module prompt_handling\n *\n * @module     mod_questiongenerator/prompt_handling\n * @copyright  2024 YOUR NAME <your@email.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport { call as getContent } from \"core/ajax\";\nimport promptModal from './prompt_modal';\nexport const promptHandling = async (cmid) => {\n\n    var form = $('#prompt-form');\n    var content = $('#mod-qg-body');\n    var spinner = $('#qg-spinner');\n    var save = $('#save-question');\n    var nextStep = $('#next-step');\n    var tryagain = $('#try-again');\n    var modal = $('#bsmodal');\n    var questionData = null;\n    var saveCategory = $('#save-category');\n    form.on('submit', function (e) {\n        e.preventDefault();\n        let formdata = new FormData(this);\n        let prompt = formdata.get('prompt');\n        form.trigger('reset');\n        spinner.show();\n        $(this).find('button[type=\"submit\"]').prop('disabled', true);\n        // promptModal.create({});\n\n\n        getContent([{\n            methodname: 'mod_questiongenerator_submit_prompts',\n            args: { prompt: prompt },\n        }])[0].done(response => {\n            let questions = JSON.parse(response);\n            // console.log(questions);\n            questionData = response;\n            showQuestions(questions);\n            spinner.hide();\n            $(this).find('button[type=\"submit\"]').prop('disabled', false);\n        }).fail(error => {\n            spinner.hide();\n            throw new Error(error.message);\n        });\n    });\n\n    $(document).on('click', '#next-step', function () {\n        $(this).prop('disabled', true); // Disable the button to prevent multiple clicks\n        content.empty(); // Clear the content\n        // $(this).attr('id','savecat-question');\n        if (questionData) {\n            console.log(questionData);\n\n            getContent([{\n                methodname: 'mod_questiongenerator_get_questions_categories',\n                args: {},\n            }])[0].done(response => {\n                $(this).prop('disabled', false); // Re-enable the button after response\n\n                // Check if the response has categories\n                if (response && response.length > 0) {\n                    renderCategorySelect(response);\n                } else {\n                    renderCategoryInput(); // If no categories, show input field\n                }\n            }).fail(error => {\n                spinner.hide();\n                console.error('Error:', error.message);\n                $(this).prop('disabled', false); // Re-enable the button in case of error\n            });\n        }\n    });\n    $(document).on('click', '#save-category', function () {\n        $(this).prop('disabled', true); // Disable the button to prevent multiple clicks\n        // $(this).attr('id','savecat-question');\n        let categoryValue = $('#category').val();\n        content.empty(); // Clear the content\n\n        console.log(categoryValue);\n        if (questionData) {\n            getContent([{\n                methodname: 'mod_questiongenerator_create_question_category',\n                args: {\n                    'cmid': cmid,\n                    'categoryname': categoryValue\n                },\n            }])[0].done(response => {\n                $(this).prop('disabled', false); // Re-enable the button after response\n                console.log(response);\n                console.log(questionData);\n\n                if (response.status) {\n                    getContent([{\n                        methodname: 'mod_questiongenerator_get_questions_categories',\n                        args: {},\n                    }])[0].done(response => {\n                        $(this).prop('disabled', false); // Re-enable the button after response\n\n                        // Check if the response has categories\n                        if (response && response.length > 0) {\n                            renderCategorySelect(response);\n                        } else {\n                            renderCategoryInput(); // If no categories, show input field\n                        }\n                    }).fail(error => {\n                        spinner.hide();\n                        console.error('Error:', error.message);\n                        $(this).prop('disabled', false); // Re-enable the button in case of error\n                    });\n                } else {\n                    renderCategoryInput(); // If no categories, show input field\n                }\n                // Check if the response has categories\n\n            }).fail(error => {\n                spinner.hide();\n                console.error('Error:', error.message);\n                $(this).prop('disabled', false); // Re-enable the button in case of error\n            });\n        }\n    });\n    $(document).on('click', '#save-question', function () {\n        $(this).prop('disabled', true); // Disable the button to prevent multiple clicks\n        // $(this).attr('id','savecat-question');\n        let categoryValue = $('#category').val();\n        console.log(categoryValue);\n        content.empty(); // Clear the content\n\n        if (questionData) {\n            var questionDataJson = JSON.parse(questionData);\n            getContent([{\n                methodname: 'mod_questiongenerator_save_generated_questions',\n                args: {\n                    'cmid': cmid,\n                    'categoryid': categoryValue,\n                    'questionData': questionDataJson\n                },\n            }])[0].done(response => {\n                $(this).prop('disabled', false); // Re-enable the button after response\n                console.log(response);\n                content.html(response);\n\n            }).fail(error => {\n                spinner.hide();\n                console.error('Error:', error.message);\n                $(this).prop('disabled', false); // Re-enable the button in case of error\n            });\n        }\n    });\n    // $(document).on('click', '.save-btn', function (e) {\n    //    e.preventDefault();\n    //    let category = $('#category').val();\n    //    console.log(val);\n    // })\n\n\n    // Function to render category select dropdown with Bootstrap styling\n    function renderCategorySelect(categories) {\n        let selectHTML = `<div class=\"form-group\">\n                            <label for=\"category\">Select Category:</label>\n                            <select id=\"category\" class=\"form-control\" name=\"category\">`;\n\n        // Populate the select options\n        categories.forEach(category => {\n            selectHTML += `<option value=\"${category.id}\">${category.name}</option>`;\n        });\n\n        selectHTML += `</select>\n                       </div>\n                       <button id=\"createNewCategoryBtn\" type=\"button\" class=\"btn btn-outline-primary mt-2\">Create New Category</button>`;\n\n        content.html(selectHTML); // Render the dropdown into the content variable\n        $('#next-step').text('Save Questions');\n        $('#next-step').attr('id', 'save-question');\n        $('#save-category').text('Save Questions');\n        $('#save-category').attr('id', 'save-question');\n        // Add event listener for \"Create New Category\" button\n        $('#createNewCategoryBtn').on('click', function () {\n            renderCategoryInput(); // Switch to input text field\n        });\n    }\n\n    // Function to render category input text field with Bootstrap styling\n    function renderCategoryInput() {\n        const inputHTML = `<div class=\"form-group\">\n                             <label for=\"category\">New Category:</label>\n                             <input type=\"text\" id=\"category\" class=\"form-control\" name=\"category\" placeholder=\"Enter new category\">\n                           </div>\n                           <button id=\"backToSelectBtn\" type=\"button\" class=\"btn btn-outline-secondary mt-2\">Back to Select</button>`;\n\n        content.html(inputHTML); // Render the input field into the content variable\n        $('#save-question').text('Create Category');\n        $('#save-question').attr('id', 'save-category');\n\n\n        // Add event listener for \"Back to Select\" button\n        $('#backToSelectBtn').on('click', function () {\n            // Call the API again or restore previous categories if needed\n            getContent([{\n                methodname: 'mod_questiongenerator_get_questions_categories',\n                args: {},\n            }])[0].done(response => {\n                renderCategorySelect(response);\n            });\n        });\n    }\n\n    $(document).on('click', '#mod-qg-close', function () {\n        hideModal();\n    });\n\n    tryagain.on('click', function () {\n        hideModal();\n    });\n\n    function showQuestions(questions) {\n        let html = '';\n        questions.forEach(question => {\n            html += ` <div class=\"quiz-container\"><div class=\"question\">\n                        <h6>${question.question}</h6>\n                        </div>\n                          <div class=\"options\">\n                        `;\n            question.options.forEach((option, index) => {\n                html += `<label class=\"option\">\n                       \n                        <span><strong>${index + 1}.</strong>  ${option}</span>\n                    </label>`;\n            });\n\n            html += `</div><div id=\"result\" class=\"result\">\n                    <p>The correct answer is: <span id=\"correctAnswer\">${question.correct_answer}</span></p>\n                    </div>`;\n            html += '</div></div>';\n        });\n\n        content.empty().html(html);\n        modal.modal('show');\n    }\n    function hideModal() {\n        modal.addClass('hide');\n        setTimeout(() => {\n            modal.modal('hide').removeClass('hide');\n        }, 250);\n    }\n\n    $(document).on('click', '#attemptquiz', startAttempt);\n    function startAttempt(e) {\n        e.preventDefault();\n    \n        getContent([{\n            methodname: 'mod_questiongenerator_attempt_quiz',\n            args: { cmid: cmid,status:'start' },\n        }])[0].done(response => {\n          if(response.status) {\n            window.location.href = `attempt.php?id=${cmid}`;\n          }\n        }).fail(error => {\n            throw new Error(error.message);\n        });\n    }\n};\n\n"],"names":["_interopRequireDefault","obj","__esModule","default","_jquery","_prompt_modal","_exports","promptHandling","async","form","$","content","spinner","tryagain","modal","questionData","renderCategorySelect","categories","selectHTML","forEach","category","concat","id","name","html","text","attr","on","renderCategoryInput","getContent","methodname","args","done","response","hideModal","addClass","setTimeout","removeClass","e","preventDefault","prompt","FormData","this","get","trigger","show","find","prop","questions","JSON","parse","question","options","option","index","correct_answer","empty","showQuestions","hide","fail","error","Error","message","document","console","log","length","categoryValue","val","cmid","categoryname","status","questionDataJson","categoryid","window","location","href"],"mappings":"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"}
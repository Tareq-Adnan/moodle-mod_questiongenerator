{"version":3,"file":"prompt_handling.min.js","sources":["../src/prompt_handling.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module prompt_handling\n *\n * @module     mod_questiongenerator/prompt_handling\n * @copyright  2024 YOUR NAME <your@email.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from \"jquery\";\nimport { call as getContent } from \"core/ajax\";\n\nexport const promptHandling = async (cmid) => {\n    var form = $(\"#prompt-form\");\n    var content = $(\"#mod-qg-body\");\n    var spinner = $(\"#qg-spinner\");\n    var save = $(\"#save-question\");\n    var nextStep = $(\"#next-step\");\n    var tryagain = $(\"#try-again\");\n    var modal = $(\"#bsmodal\");\n    var questionData = null;\n    var saveCategory = $(\"#save-category\");\n    form.on(\"submit\", function (e) {\n        e.preventDefault();\n        let formdata = new FormData(this);\n        let prompt = formdata.get(\"prompt\");\n        form.trigger(\"reset\");\n        spinner.show();\n        $(this).find('button[type=\"submit\"]').prop(\"disabled\", true);\n        // promptModal.create({});\n\n        getContent([\n            {\n                methodname: \"mod_questiongenerator_submit_prompts\",\n                args: { prompt: prompt },\n            },\n        ])[0]\n            .done((response) => {\n                let questions = JSON.parse(response);\n                // console.log(questions);\n                questionData = response;\n                showQuestions(questions);\n                spinner.hide();\n                $(this).find('button[type=\"submit\"]').prop(\"disabled\", false);\n            })\n            .fail((error) => {\n                spinner.hide();\n                throw new Error(error.message);\n            });\n    });\n\n    $(document).on(\"click\", \"#next-step\", function () {\n        $(this).prop(\"disabled\", true); // Disable the button to prevent multiple clicks\n        content.empty(); // Clear the content\n        // $(this).attr('id','savecat-question');\n        if (questionData) {\n            console.log(questionData);\n\n            getContent([\n                {\n                    methodname: \"mod_questiongenerator_get_questions_categories\",\n                    args: {\n                        cmid: cmid,\n                    },\n                },\n            ])[0]\n                .done((response) => {\n                    $(this).prop(\"disabled\", false); // Re-enable the button after response\n\n                    // Check if the response has categories\n                    if (response && response.length > 0) {\n                        renderCategorySelect(response);\n                    } else {\n                        renderCategoryInput(); // If no categories, show input field\n                    }\n                })\n                .fail((error) => {\n                    spinner.hide();\n                    console.error(\"Error:\", error.message);\n                    $(this).prop(\"disabled\", false); // Re-enable the button in case of error\n                });\n        }\n    });\n    $(document).on(\"click\", \"#save-category\", function () {\n        $(this).prop(\"disabled\", true); // Disable the button to prevent multiple clicks\n        // $(this).attr('id','savecat-question');\n        let categoryValue = $(\"#category\").val();\n        content.empty(); // Clear the content\n\n        console.log(categoryValue);\n        if (questionData) {\n            getContent([\n                {\n                    methodname: \"mod_questiongenerator_create_question_category\",\n                    args: {\n                        cmid: cmid,\n                        categoryname: categoryValue,\n                    },\n                },\n            ])[0]\n                .done((response) => {\n                    $(this).prop(\"disabled\", false); // Re-enable the button after response\n                    console.log(response);\n                    console.log(questionData);\n\n                    if (response.status) {\n                        getContent([\n                            {\n                                methodname: \"mod_questiongenerator_get_questions_categories\",\n                                args: {\n                                    cmid: cmid,\n                                },\n                            },\n                        ])[0]\n                            .done((response) => {\n                                $(this).prop(\"disabled\", false); // Re-enable the button after response\n\n                                // Check if the response has categories\n                                if (response && response.length > 0) {\n                                    renderCategorySelect(response);\n                                } else {\n                                    renderCategoryInput(); // If no categories, show input field\n                                }\n                            })\n                            .fail((error) => {\n                                spinner.hide();\n                                console.error(\"Error:\", error.message);\n                                $(this).prop(\"disabled\", false); // Re-enable the button in case of error\n                            });\n                    } else {\n                        renderCategoryInput(); // If no categories, show input field\n                    }\n                    // Check if the response has categories\n                })\n                .fail((error) => {\n                    spinner.hide();\n                    console.error(\"Error:\", error.message);\n                    $(this).prop(\"disabled\", false); // Re-enable the button in case of error\n                });\n        }\n    });\n    $(document).on(\"click\", \"#save-question\", function () {\n        let $this = $(this);\n        $this.prop(\"disabled\", true); // Disable the button to prevent multiple clicks\n\n        let categoryValue = $(\"#category\").val();\n        console.log(categoryValue);\n\n        content.empty(); // Clear the content\n\n        // Show saving animation\n        let savingAnimation = $('<div class=\"saving-animation\">Saving...</div>');\n        content.append(savingAnimation);\n\n        if (questionData) {\n            // Check if correct_answer is an array\n\n            // If you need to convert it back to a JSON string\n            var questionDataJson = JSON.parse(questionData);\n            // Loop through each question object\n            questionDataJson.forEach(function (question) {\n                // Check if correct_answer is an array for each question\n                if (Array.isArray(question.correct_answer)) {\n                    // Convert the array to a single value (e.g., the first element)\n                    question.correct_answer = question.correct_answer[0];\n                }\n            });\n            getContent([\n                {\n                    methodname: \"mod_questiongenerator_save_generated_questions\",\n                    args: {\n                        cmid: cmid,\n                        categoryid: categoryValue,\n                        questionData: questionDataJson,\n                    },\n                },\n            ])[0]\n                .done((response) => {\n                    $this.prop(\"disabled\", false); // Re-enable the button after response\n                    console.log(response);\n\n                    // Remove saving animation and show success icon\n                    savingAnimation.remove();\n                    let successIcon = $('<div class=\"success-icon\">✔️ Saved</div>');\n                    content.html(successIcon);\n                })\n                .fail((error) => {\n                    spinner.hide();\n                    console.error(\"Error:\", error.message);\n\n                    // Remove saving animation\n                    savingAnimation.remove();\n                    $this.prop(\"disabled\", false); // Re-enable the button in case of error\n                });\n        }\n\n        // Remove modal footer\n        $(\".modal-footer\").remove();\n    });\n\n    // $(document).on('click', '.save-btn', function (e) {\n    //    e.preventDefault();\n    //    let category = $('#category').val();\n    //    console.log(val);\n    // })\n\n    // Function to render category select dropdown with Bootstrap styling\n    /**\n     * Description\n     * @param {any} categories\n     * @returns {any}\n     */\n    function renderCategorySelect(categories) {\n        let selectHTML = `<div class=\"form-group\">\n                            <label for=\"category\">Select Category:</label>\n                            <select id=\"category\" class=\"form-control\" name=\"category\">`;\n\n        // Populate the select options\n        categories.forEach((category) => {\n            selectHTML += `<option value=\"${category.id}\">${category.name}</option>`;\n        });\n\n        selectHTML += `</select>\n                       </div>\n                       <button id=\"createNewCategoryBtn\" type=\"button\" class=\"btn btn-outline-primary\n                       mt-2\">Create New Category</button>`;\n\n        content.html(selectHTML); // Render the dropdown into the content variable\n\n        $(\"#next-step\").text(\"Save Questions\");\n        $(\"#next-step\").attr(\"id\", \"save-question\");\n        $(\"#save-category\").text(\"Save Questions\");\n        $(\"#save-category\").attr(\"id\", \"save-question\");\n        // Add event listener for \"Create New Category\" button\n        $(\"#createNewCategoryBtn\").on(\"click\", function () {\n            renderCategoryInput(); // Switch to input text field\n        });\n    }\n\n    // Function to render category input text field with Bootstrap styling\n    /**\n     * Description\n     * @returns {any}\n     */\n    function renderCategoryInput() {\n        const inputHTML = `<div class=\"form-group\">\n                             <label for=\"category\">New Category:</label>\n                             <input type=\"text\" id=\"category\" class=\"form-control\" name=\"category\" placeholder=\"Enter new category\">\n                           </div>\n                           <button id=\"backToSelectBtn\" type=\"button\" class=\"btn btn-outline-secondary\n                            mt-2\">Back to Select</button>`;\n\n        content.html(inputHTML); // Render the input field into the content variable\n        $(\"#save-question\").text(\"Create Category\");\n        $(\"#save-question\").attr(\"id\", \"save-category\");\n\n        $(\"#next-step\").text(\"Create Category\");\n        $(\"#next-step\").attr(\"id\", \"save-category\");\n        // Add event listener for \"Back to Select\" button\n        $(\"#backToSelectBtn\").on(\"click\", function () {\n            // Call the API again or restore previous categories if needed\n            getContent([\n                {\n                    methodname: \"mod_questiongenerator_get_questions_categories\",\n                    args: {\n                        cmid: cmid,\n                    },\n                },\n            ])[0].done((response) => {\n                renderCategorySelect(response);\n            });\n        });\n    }\n\n    $(document).on(\"click\", \"#mod-qg-close\", function () {\n        hideModal();\n    });\n\n    tryagain.on(\"click\", function () {\n        hideModal();\n    });\n\n    /**\n     * Description\n     * @param {any} questions\n     * @returns {any}\n     */\n    function showQuestions(questions) {\n        let html = \"\";\n        questions.forEach((question) => {\n            html += ` <div class=\"quiz-container\"><div class=\"question\">\n                        <h6>${question.question}</h6>\n                        </div>\n                          <div class=\"options\">\n                        `;\n            question.options.forEach((option, index) => {\n                html += `<label class=\"option\">\n\n                        <span><strong>${index + 1}.</strong>  ${option}</span>\n                    </label>`;\n            });\n\n            html += `</div><div id=\"result\" class=\"result\">\n                    <p>The correct answer is: <span id=\"correctAnswer\">${question.correct_answer}</span></p>\n                    </div>`;\n            html += \"</div></div>\";\n        });\n\n        content.empty().html(html);\n        modal.modal(\"show\");\n    }\n    /**\n     * Description\n     * @returns {any}\n     */\n    function hideModal() {\n        modal.addClass(\"hide\");\n        setTimeout(() => {\n            modal.modal(\"hide\").removeClass(\"hide\");\n        }, 250);\n    }\n\n    $(document).on(\"click\", \"#attemptquiz\", startAttempt);\n    /**\n     * Description\n     * @param {any} e\n     * @returns {any}\n     */\n    function startAttempt(e) {\n        e.preventDefault();\n        getContent([\n            {\n                methodname: \"mod_questiongenerator_attempt_quiz\",\n                args: {\n                    cmid: cmid, status: \"start\"\n                },\n            },\n        ])[0]\n            .done((response) => {\n                if (response.status) {\n                    window.location.href = `attempt.php?id=${cmid}`;\n                }\n            })\n            .fail((error) => {\n                throw new Error(error.message);\n            });\n    }\n};\n"],"names":["obj","_jquery","__esModule","default","_exports","promptHandling","async","form","$","content","spinner","tryagain","modal","questionData","renderCategorySelect","categories","selectHTML","forEach","category","concat","id","name","html","text","attr","on","renderCategoryInput","getContent","methodname","args","cmid","done","response","hideModal","addClass","setTimeout","removeClass","e","preventDefault","prompt","FormData","this","get","trigger","show","find","prop","questions","JSON","parse","question","options","option","index","correct_answer","empty","showQuestions","hide","fail","error","Error","message","document","console","log","length","categoryValue","val","categoryname","status","$this","savingAnimation","append","questionDataJson","Array","isArray","categoryid","remove","successIcon","window","location","href"],"mappings":"kHAuBuB,IAAAA;;;;;;;4FAAvBC,SAAuBD,IAAvBC,UAAuBD,IAAAE,WAAAF,KAAAG,QAAAH,KAkVrBI,SAAAC,eA/U4BC,MAAAA,OAC1B,IAAIC,MAAO,EAAAC,iBAAE,gBACTC,SAAU,EAAAD,iBAAE,gBACZE,SAAU,EAAAF,iBAAE,eAGZG,WAFO,EAAAH,iBAAE,mBACE,EAAAA,iBAAE,eACF,EAAAA,iBAAE,eACbI,OAAQ,EAAAJ,iBAAE,YACVK,aAAe,MACA,EAAAL,iBAAE,kBA+LrB,SAASM,qBAAqBC,YAC1B,IAAIC,2MAKJD,WAAWE,SAASC,WAChBF,8BAAUG,OAAsBD,SAASE,SAAED,OAAKD,SAASG,qBAG7DL,yNAKAP,QAAQa,KAAKN,aAEb,EAAAR,iBAAE,cAAce,KAAK,mBACrB,EAAAf,iBAAE,cAAcgB,KAAK,KAAM,kBAC3B,EAAAhB,iBAAE,kBAAkBe,KAAK,mBACzB,EAAAf,iBAAE,kBAAkBgB,KAAK,KAAM,kBAE/B,EAAAhB,iBAAE,yBAAyBiB,GAAG,SAAS,WACnCC,yBASR,SAASA,sBAQLjB,QAAQa,wbACR,EAAAd,iBAAE,kBAAkBe,KAAK,oBACzB,EAAAf,iBAAE,kBAAkBgB,KAAK,KAAM,kBAE/B,EAAAhB,iBAAE,cAAce,KAAK,oBACrB,EAAAf,iBAAE,cAAcgB,KAAK,KAAM,kBAE3B,EAAAhB,iBAAE,oBAAoBiB,GAAG,SAAS,YAE9B,EAAAE,YAAW,CACP,CACIC,WAAY,iDACZC,KAAM,CACFC,KAAMA,SAGf,GAAGC,MAAMC,WACRlB,qBAAqBkB,gBA8CjC,SAASC,YACLrB,MAAMsB,SAAS,QACfC,YAAW,KACPvB,MAAMA,MAAM,QAAQwB,YAAY,UACjC,KAzSP7B,KAAKkB,GAAG,UAAU,SAAUY,GACxBA,EAAEC,iBACF,IACIC,OADW,IAAIC,SAASC,MACNC,IAAI,UAC1BnC,KAAKoC,QAAQ,SACbjC,QAAQkC,QACR,EAAApC,iBAAEiC,MAAMI,KAAK,yBAAyBC,KAAK,YAAY,IAGvD,EAAAnB,YAAW,CACP,CACIC,WAAY,uCACZC,KAAM,CAAEU,OAAQA,WAErB,GACER,MAAMC,WACH,IAAIe,UAAYC,KAAKC,MAAMjB,UAE3BnB,aAAemB,SAuP3B,SAAuBe,WACnB,IAAIzB,KAAO,GACXyB,UAAU9B,SAASiC,WACf5B,0FAAIH,OACc+B,SAASA,6HAI3BA,SAASC,QAAQlC,SAAQ,CAACmC,OAAQC,SAC9B/B,yEAAIH,OAEoBkC,MAAQ,kBAAClC,OAAeiC,mDAIpD9B,wHAAIH,OACyD+B,SAASI,0DAEtEhC,MAAQ,kBAGZb,QAAQ8C,QAAQjC,KAAKA,MACrBV,MAAMA,MAAM,QA5QJ4C,CAAcT,WACdrC,QAAQ+C,QACR,EAAAjD,iBAAEiC,MAAMI,KAAK,yBAAyBC,KAAK,YAAY,MAE1DY,MAAMC,QAEH,MADAjD,QAAQ+C,OACF,IAAIG,MAAMD,MAAME,gBAIlC,EAAArD,iBAAEsD,UAAUrC,GAAG,QAAS,cAAc,YAClC,EAAAjB,iBAAEiC,MAAMK,KAAK,YAAY,GACzBrC,QAAQ8C,QAEJ1C,eACAkD,QAAQC,IAAInD,eAEZ,EAAAc,YAAW,CACP,CACIC,WAAY,iDACZC,KAAM,CACFC,KAAMA,SAGf,GACEC,MAAMC,YACH,EAAAxB,iBAAEiC,MAAMK,KAAK,YAAY,GAGrBd,UAAYA,SAASiC,OAAS,EAC9BnD,qBAAqBkB,UAErBN,yBAGPgC,MAAMC,QACHjD,QAAQ+C,OACRM,QAAQJ,MAAM,SAAUA,MAAME,UAC9B,EAAArD,iBAAEiC,MAAMK,KAAK,YAAY,WAIzC,EAAAtC,iBAAEsD,UAAUrC,GAAG,QAAS,kBAAkB,YACtC,EAAAjB,iBAAEiC,MAAMK,KAAK,YAAY,GAEzB,IAAIoB,eAAgB,EAAA1D,iBAAE,aAAa2D,MACnC1D,QAAQ8C,QAERQ,QAAQC,IAAIE,eACRrD,eACA,EAAAc,YAAW,CACP,CACIC,WAAY,iDACZC,KAAM,CACFC,KAAMA,KACNsC,aAAcF,kBAGvB,GACEnC,MAAMC,YACH,EAAAxB,iBAAEiC,MAAMK,KAAK,YAAY,GACzBiB,QAAQC,IAAIhC,UACZ+B,QAAQC,IAAInD,cAERmB,SAASqC,QACT,EAAA1C,YAAW,CACP,CACIC,WAAY,iDACZC,KAAM,CACFC,KAAMA,SAGf,GACEC,MAAMC,YACH,EAAAxB,iBAAEiC,MAAMK,KAAK,YAAY,GAGrBd,UAAYA,SAASiC,OAAS,EAC9BnD,qBAAqBkB,UAErBN,yBAGPgC,MAAMC,QACHjD,QAAQ+C,OACRM,QAAQJ,MAAM,SAAUA,MAAME,UAC9B,EAAArD,iBAAEiC,MAAMK,KAAK,YAAY,MAGjCpB,yBAIPgC,MAAMC,QACHjD,QAAQ+C,OACRM,QAAQJ,MAAM,SAAUA,MAAME,UAC9B,EAAArD,iBAAEiC,MAAMK,KAAK,YAAY,UAIzC,EAAAtC,iBAAEsD,UAAUrC,GAAG,QAAS,kBAAkB,WACtC,IAAI6C,OAAQ,EAAA9D,iBAAEiC,MACd6B,MAAMxB,KAAK,YAAY,GAEvB,IAAIoB,eAAgB,EAAA1D,iBAAE,aAAa2D,MACnCJ,QAAQC,IAAIE,eAEZzD,QAAQ8C,QAGR,IAAIgB,iBAAkB,EAAA/D,iBAAE,iDAGxB,GAFAC,QAAQ+D,OAAOD,iBAEX1D,aAAc,CAId,IAAI4D,iBAAmBzB,KAAKC,MAAMpC,cAElC4D,iBAAiBxD,SAAQ,SAAUiC,UAE3BwB,MAAMC,QAAQzB,SAASI,kBAEvBJ,SAASI,eAAiBJ,SAASI,eAAe,QAG1D,EAAA3B,YAAW,CACP,CACIC,WAAY,iDACZC,KAAM,CACFC,KAAMA,KACN8C,WAAYV,cACZrD,aAAc4D,qBAGvB,GACE1C,MAAMC,WACHsC,MAAMxB,KAAK,YAAY,GACvBiB,QAAQC,IAAIhC,UAGZuC,gBAAgBM,SAChB,IAAIC,aAAc,EAAAtE,iBAAE,4CACpBC,QAAQa,KAAKwD,gBAEhBpB,MAAMC,QACHjD,QAAQ+C,OACRM,QAAQJ,MAAM,SAAUA,MAAME,SAG9BU,gBAAgBM,SAChBP,MAAMxB,KAAK,YAAY,OAKnC,EAAAtC,iBAAE,iBAAiBqE,aA6EvB,EAAArE,iBAAEsD,UAAUrC,GAAG,QAAS,iBAAiB,WACrCQ,eAGJtB,SAASc,GAAG,SAAS,WACjBQ,gBA2CJ,EAAAzB,iBAAEsD,UAAUrC,GAAG,QAAS,gBAMxB,SAAsBY,GAClBA,EAAEC,kBACF,EAAAX,YAAW,CACP,CACIC,WAAY,qCACZC,KAAM,CACFC,KAAMA,KAAMuC,OAAQ,YAG7B,GACEtC,MAAMC,WACCA,SAASqC,SACTU,OAAOC,SAASC,uBAAI9D,OAAqBW,UAGhD4B,MAAMC,QACH,MAAM,IAAIC,MAAMD,MAAME"}
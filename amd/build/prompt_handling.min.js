define("mod_questiongenerator/prompt_handling",["exports","jquery","core/ajax","./prompt_modal"],(function(_exports,_jquery,_ajax,_prompt_modal){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * TODO describe module prompt_handling
   *
   * @module     mod_questiongenerator/prompt_handling
   * @copyright  2024 YOUR NAME <your@email.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.promptHandling=void 0,_jquery=_interopRequireDefault(_jquery),_prompt_modal=_interopRequireDefault(_prompt_modal);_exports.promptHandling=async cmid=>{var form=(0,_jquery.default)("#prompt-form"),content=(0,_jquery.default)("#mod-qg-body"),spinner=(0,_jquery.default)("#qg-spinner"),tryagain=((0,_jquery.default)("#save-question"),(0,_jquery.default)("#next-step"),(0,_jquery.default)("#try-again")),modal=(0,_jquery.default)("#bsmodal"),questionData=null;(0,_jquery.default)("#save-category");function renderCategorySelect(categories){let selectHTML='<div class="form-group">\n                            <label for="category">Select Category:</label>\n                            <select id="category" class="form-control" name="category">';categories.forEach((category=>{selectHTML+='<option value="'.concat(category.id,'">').concat(category.name,"</option>")})),selectHTML+='</select>\n                       </div>\n                       <button id="createNewCategoryBtn" type="button" class="btn btn-outline-primary mt-2">Create New Category</button>',content.html(selectHTML),(0,_jquery.default)("#next-step").text("Save Questions"),(0,_jquery.default)("#next-step").attr("id","save-question"),(0,_jquery.default)("#save-category").text("Save Questions"),(0,_jquery.default)("#save-category").attr("id","save-question"),(0,_jquery.default)("#createNewCategoryBtn").on("click",(function(){renderCategoryInput()}))}function renderCategoryInput(){content.html('<div class="form-group">\n                             <label for="category">New Category:</label>\n                             <input type="text" id="category" class="form-control" name="category" placeholder="Enter new category">\n                           </div>\n                           <button id="backToSelectBtn" type="button" class="btn btn-outline-secondary mt-2">Back to Select</button>'),(0,_jquery.default)("#save-question").text("Create Category"),(0,_jquery.default)("#save-question").attr("id","save-category"),(0,_jquery.default)("#backToSelectBtn").on("click",(function(){(0,_ajax.call)([{methodname:"mod_questiongenerator_get_questions_categories",args:{}}])[0].done((response=>{renderCategorySelect(response)}))}))}function hideModal(){modal.addClass("hide"),setTimeout((()=>{modal.modal("hide").removeClass("hide")}),250)}form.on("submit",(function(e){e.preventDefault();let prompt=new FormData(this).get("prompt");form.trigger("reset"),spinner.show(),(0,_jquery.default)(this).find('button[type="submit"]').prop("disabled",!0),(0,_ajax.call)([{methodname:"mod_questiongenerator_submit_prompts",args:{prompt:prompt}}])[0].done((response=>{let questions=JSON.parse(response);questionData=response,function(questions){let html="";questions.forEach((question=>{html+=' <div class="quiz-container"><div class="question">\n                        <h6>'.concat(question.question,'</h6>\n                        </div>\n                          <div class="options">\n                        '),question.options.forEach(((option,index)=>{html+='<label class="option">\n                       \n                        <span><strong>'.concat(index+1,".</strong>  ").concat(option,"</span>\n                    </label>")})),html+='</div><div id="result" class="result">\n                    <p>The correct answer is: <span id="correctAnswer">'.concat(question.correct_answer,"</span></p>\n                    </div>"),html+="</div></div>"})),content.empty().html(html),modal.modal("show")}(questions),spinner.hide(),(0,_jquery.default)(this).find('button[type="submit"]').prop("disabled",!1)})).fail((error=>{throw spinner.hide(),new Error(error.message)}))})),(0,_jquery.default)(document).on("click","#next-step",(function(){(0,_jquery.default)(this).prop("disabled",!0),content.empty(),questionData&&(console.log(questionData),(0,_ajax.call)([{methodname:"mod_questiongenerator_get_questions_categories",args:{}}])[0].done((response=>{(0,_jquery.default)(this).prop("disabled",!1),response&&response.length>0?renderCategorySelect(response):renderCategoryInput()})).fail((error=>{spinner.hide(),console.error("Error:",error.message),(0,_jquery.default)(this).prop("disabled",!1)})))})),(0,_jquery.default)(document).on("click","#save-category",(function(){(0,_jquery.default)(this).prop("disabled",!0);let categoryValue=(0,_jquery.default)("#category").val();content.empty(),console.log(categoryValue),questionData&&(0,_ajax.call)([{methodname:"mod_questiongenerator_create_question_category",args:{cmid:cmid,categoryname:categoryValue}}])[0].done((response=>{(0,_jquery.default)(this).prop("disabled",!1),console.log(response),console.log(questionData),response.status?(0,_ajax.call)([{methodname:"mod_questiongenerator_get_questions_categories",args:{}}])[0].done((response=>{(0,_jquery.default)(this).prop("disabled",!1),response&&response.length>0?renderCategorySelect(response):renderCategoryInput()})).fail((error=>{spinner.hide(),console.error("Error:",error.message),(0,_jquery.default)(this).prop("disabled",!1)})):renderCategoryInput()})).fail((error=>{spinner.hide(),console.error("Error:",error.message),(0,_jquery.default)(this).prop("disabled",!1)}))})),(0,_jquery.default)(document).on("click","#save-question",(function(){(0,_jquery.default)(this).prop("disabled",!0);let categoryValue=(0,_jquery.default)("#category").val();if(console.log(categoryValue),content.empty(),questionData){var questionDataJson=JSON.parse(questionData);(0,_ajax.call)([{methodname:"mod_questiongenerator_save_generated_questions",args:{cmid:cmid,categoryid:categoryValue,questionData:questionDataJson}}])[0].done((response=>{(0,_jquery.default)(this).prop("disabled",!1),console.log(response),content.html(response)})).fail((error=>{spinner.hide(),console.error("Error:",error.message),(0,_jquery.default)(this).prop("disabled",!1)}))}})),(0,_jquery.default)(document).on("click","#mod-qg-close",(function(){hideModal()})),tryagain.on("click",(function(){hideModal()}))}}));

//# sourceMappingURL=prompt_handling.min.js.map